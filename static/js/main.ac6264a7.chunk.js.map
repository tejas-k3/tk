{"version":3,"sources":["Tile.js","App.js","reportWebVitals.js","index.js","pfp.jpg"],"names":["Tile","_ref","tileName","content","isSquare","color","shuffleColors","isDarkMode","useContext","ThemeContext","_useState","useState","_useState2","_slicedToArray","isFlipped","setIsFlipped","tileStyle","--tile-color","--text-color","tileSize","concat","Math","floor","random","tileClass","React","createElement","className","style","onClick","type","href","url","width","height","src","iconSrc","alt","iconAlt","createContext","App","setIsDarkMode","titleRef","useRef","_useState3","_useState4","areTilesVisible","setAreTilesVisible","_useState5","_useState6","tileColors","setTileColors","_useState7","_useState8","tileSizes","setTileSizes","useEffect","generateTileSizes","sizes","data","tiles","forEach","tile","index","size","shuffledColors","map","getRandomColor","i","Provider","value","itachiImage","marginLeft","ref","Moon","Sun","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"kNAuEeA,eAnEF,SAAHC,GAA8D,IAAxDC,EAAQD,EAARC,SAAUC,EAAOF,EAAPE,QAASC,EAAQH,EAARG,SAAUC,EAAKJ,EAALI,MAAOC,EAAaL,EAAbK,cAC5CC,EAAaC,qBAAWC,GAAcC,EACVC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GASxBI,EAAY,CAChBC,eAAgBZ,EAChBa,eAAgBX,EAAa,QAAU,SAGnCY,EAAQ,GAAAC,OATAC,KAAKC,MAAmB,IAAbD,KAAKE,SAFZ,IAWiB,MAC/BnB,GACFY,EAAU,gBAAkBG,EAC5BH,EAAU,iBAAmBG,IAE7BH,EAAU,gBAAkB,QAC5BA,EAAU,iBAAmBG,GAG/B,IA+BMK,EAAS,QAAAJ,OAAWN,EAAY,GAAK,WAE3C,OACEW,IAAAC,cAAA,OAAKC,UAAWH,EAAWI,MAAOZ,EAAWa,QAlC3B,WACD,kBAAb3B,EACFI,IAEAS,GAAcD,KA+BZW,IAAAC,cAAA,OAAKC,UAAU,aACdb,EAAYW,IAAAC,cAAA,OAAKC,UAAU,aAAazB,GA5BxB,aAAjBC,EAAQ2B,KAERL,IAAAC,cAAA,KAAGK,KAAM5B,EAAQ6B,KACfP,IAAAC,cAAA,OACEC,UAAU,iBACVC,MAAO,CACLK,MAAO,OACPC,OAAQ,SAGVT,IAAAC,cAAA,OACES,IAAKhC,EAAQiC,QACbC,IAAKlC,EAAQmC,QACbX,UAAS,QAAAP,OAAUN,EAAY,UAAY,QAM5CW,IAAAC,cAAA,OAAKC,UAAU,gBAAgBxB,8CCjDtCM,EAAe8B,0BA0FNC,MAxFf,WAAe,IAAA9B,EACuBC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA5CH,EAAUK,EAAA,GAAE6B,EAAa7B,EAAA,GAC1B8B,EAAWC,iBAAO,MACxBC,EAC8CjC,oBAAS,GAAKkC,EAAAhC,YAAA+B,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAAAG,EACNrC,mBAAS,IAAGsC,EAAApC,YAAAmC,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAAAG,EACEzC,mBAAS,IAAG0C,EAAAxC,YAAAuC,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAS9BG,oBAAU,WACRD,EAAaE,MACZ,CAACX,IAEJ,IAAMW,EAAoB,WACxB,IAEMC,EAAQ,GAKd,OAJAC,EAAKC,MAAMC,QAAQ,SAACC,EAAMC,GACxB,IAAMC,EAAO3C,KAAKC,MAAmB,IAAbD,KAAKE,SAJf,IAKdmC,EAAMK,GAAM,GAAA3C,OAAM4C,EAAI,QAEjBN,GAOHpD,EAAgB,WACpB,IAAM2D,EAAiBN,EAAKC,MAAMM,IAAI,kBAAMC,MAC5ChB,EAAcc,IAGVE,EAAiB,WAGrB,IAFA,IACI9D,EAAQ,IACH+D,EAAI,EAAGA,EAAI,EAAGA,IACrB/D,GAHc,mBAGGgB,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOlB,GAST,OACEoB,IAAAC,cAACjB,EAAa4D,SAAQ,CAACC,MAAO/D,GAC5BkB,IAAAC,cAAA,OAAKC,UAAS,OAAAP,OAASb,EAAa,OAAS,UAC3CkB,IAAAC,cAAA,UAAQC,UAAU,UAChBF,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,OAAKE,MAAO,CAACM,OAAQ,OAAQD,MAAO,QAASN,UAAU,WAAWQ,IAAKoC,IAAalC,IAAI,aACxFZ,IAAAC,cAAA,QAAME,MAAO,CAAC4C,WAAY,QAASC,IAAK/B,EAAUb,QA9BnC,WACvBkB,GAAoBD,KA6BiE,kBAK/ErB,IAAAC,cAAA,UAAQC,UAAU,eAAeE,QAAS,kBAAMY,GAAelC,KAC5DA,EAAakB,IAAAC,cAACgD,IAAI,CAACV,KAAK,OAAO3D,MAAM,YAAeoB,IAAAC,cAACiD,IAAG,CAACX,KAAK,OAAO3D,MAAM,cAGhFoB,IAAAC,cAAA,OAAKC,UAAU,kBACZmB,GACCa,EAAKC,MAAMM,IAAI,SAACJ,EAAMC,GAAK,OACzBtC,IAAAC,cAAC1B,EAAI,CACH4E,IAAKb,EACL7D,SAAU4D,EAAK5D,SACfC,QAAS2D,EAAK3D,QACdC,SAAU0D,EAAK1D,SACfC,MAAO6C,EAAWa,IAAUD,EAAKzD,MACjCC,cAAeA,EACfa,SAAUmC,EAAUS,WC5ErBc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAjF,GAAiD,IAA9CmF,EAAMnF,EAANmF,OAAQC,EAAMpF,EAANoF,OAAQC,EAAMrF,EAANqF,OAAQC,EAAMtF,EAANsF,OAAQC,EAAOvF,EAAPuF,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpE,IAAAC,cAACD,IAAMqE,WAAU,KACfrE,IAAAC,cAACc,EAAG,QAORqC,0hDChBAkB,EAAAC,QAAiBhB,EAAAiB,EAAuB","file":"static/js/main.ac6264a7.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport './Tile.css';\r\nimport { ThemeContext } from './App';\r\n\r\nconst Tile = ({ tileName, content, isSquare, color, shuffleColors }) => {\r\n  const isDarkMode = useContext(ThemeContext);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n  const getRandomSize = () => {\r\n    const minSize = 50;\r\n    const maxSize = 200;\r\n    const num = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n    return num;\r\n  };\r\n\r\n  const tileStyle = {\r\n    '--tile-color': color,\r\n    '--text-color': isDarkMode ? 'white' : 'black',\r\n  };\r\n\r\n  const tileSize = `${getRandomSize()}px`;\r\n  if (isSquare) {\r\n    tileStyle['--tile-width'] = tileSize;\r\n    tileStyle['--tile-height'] = tileSize;\r\n  } else {\r\n    tileStyle['--tile-width'] = '400px';\r\n    tileStyle['--tile-height'] = tileSize;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (tileName === 'Color Shuffle') {\r\n      shuffleColors(); // Call the shuffleColors function passed from App.js\r\n    } else {\r\n      setIsFlipped(!isFlipped);\r\n    }\r\n  };\r\n  const renderContent = () => {\r\n    if (content.type === 'iconLink') {\r\n      return (\r\n        <a href={content.url}>\r\n          <div\r\n            className=\"icon-container\"\r\n            style={{\r\n              width: '100%',\r\n              height: '100%',\r\n            }}\r\n          >\r\n            <img\r\n              src={content.iconSrc}\r\n              alt={content.iconAlt}\r\n              className={`icon ${isFlipped ? 'flipped' : ''}`}\r\n            />\r\n          </div>\r\n        </a>\r\n      );\r\n    } else {\r\n      return <div className=\"tile-content\">{content}</div>;\r\n    }\r\n  };\r\n\r\n  const tileClass = `tile ${isFlipped ? '' : 'flipped'}`;\r\n\r\n  return (\r\n    <div className={tileClass} style={tileStyle} onClick={handleClick}>\r\n        <div className=\"tile-name\">\r\n        {isFlipped ? <div className=\"tile-name\">{tileName}</div> : renderContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React, { useState, createContext, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport Tile from './Tile';\r\nimport data from './data.json';\r\nimport itachiImage from './pfp.jpg';\r\nimport { Sun, Moon } from 'react-feather';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction App() {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const titleRef = useRef(null);\r\n  //const [imageSize, setImageSize] = useState(0); // why are you updating the state of an image? this is not needed.\r\n  const [areTilesVisible, setAreTilesVisible] = useState(true);\r\n  const [tileColors, setTileColors] = useState([]);\r\n  const [tileSizes, setTileSizes] = useState({});\r\n\r\n  // useEffect(() => {\r\n  //   if (titleRef.current) {\r\n  //     const titleHeight = titleRef.current.offsetHeight;\r\n  //     setImageSize(titleHeight);\r\n  //   }\r\n  // }, []); // useEffect here was unnecessary\r\n\r\n  useEffect(() => {\r\n    setTileSizes(generateTileSizes());\r\n  }, [areTilesVisible]);\r\n\r\n  const generateTileSizes = () => {\r\n    const minSize = 50;\r\n    const maxSize = 200;\r\n    const sizes = {};\r\n    data.tiles.forEach((tile, index) => {\r\n      const size = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n      sizes[index] = `${size}px`;\r\n    });\r\n    return sizes;\r\n  };\r\n\r\n  const handleTitleClick = () => {\r\n    setAreTilesVisible(!areTilesVisible); // Toggle the visibility of tiles\r\n  };\r\n\r\n  const shuffleColors = () => {\r\n    const shuffledColors = data.tiles.map(() => getRandomColor());\r\n    setTileColors(shuffledColors);\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n  \r\n  // const imageStyle = {\r\n  //   height: `${imageSize}px`,\r\n  //   width: `${imageSize}px`,\r\n  //   marginRight: '10px', // Add margin to create space between image and text\r\n  // }; // All the styles should always separately be in styles folder\r\n\r\n  return (\r\n    <ThemeContext.Provider value={isDarkMode}>\r\n      <div className={`App ${isDarkMode ? 'dark' : 'light'}`}>\r\n        <header className=\"header\">\r\n          <div className=\"title\">\r\n            <img style={{height: '40px', width: '40px'}} className=\"portrait\" src={itachiImage} alt=\"Portrait\" />\r\n            <span style={{marginLeft: '20px'}} ref={titleRef} onClick={handleTitleClick}>\r\n              Tejas Kothari\r\n            </span>\r\n            {/* Wrap Tejas Kothari in a span */}\r\n          </div>\r\n          <button className=\"theme-toggle\" onClick={() => setIsDarkMode(!isDarkMode)}>\r\n            {isDarkMode ? <Moon size='30px' color=\"#D3D3D3\" /> : <Sun size='30px' color=\"#E8A317\" />}\r\n          </button>\r\n        </header>\r\n        <div className=\"tile-container\">\r\n          {areTilesVisible &&\r\n            data.tiles.map((tile, index) => (\r\n              <Tile\r\n                key={index}\r\n                tileName={tile.tileName}\r\n                content={tile.content}\r\n                isSquare={tile.isSquare}\r\n                color={tileColors[index] || tile.color} // Use the shuffled color if available\r\n                shuffleColors={shuffleColors} // Pass the shuffleColors function\r\n                tileSize={tileSizes[index]}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\nexport { ThemeContext };\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","module.exports = __webpack_public_path__ + \"static/media/pfp.797b2677.jpg\";"],"sourceRoot":""}